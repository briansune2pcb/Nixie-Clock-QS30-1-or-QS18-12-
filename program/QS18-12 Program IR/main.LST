C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <reg52.H>
   2          #include <stdlib.h>
   3          #include <intrins.h>
   4          
   5          typedef unsigned char uint8_t;
   6          typedef unsigned int uint16_t;
   7          
   8          /********************************/
   9          /*    Real Time Clock Pin   */
  10          /********************************/
  11          sbit  ds1302_sck  = P2^0;
  12          sbit  ds1302_sdin = P2^1;
  13          sbit  ds1302_cs = P2^2;
  14          sbit  hx1838_data = P0^0;
  15          /********************************/
  16          /*    All Shift Data  Pin   */
  17          /********************************/
  18          sbit  cd4017_rst  = P1^7;
  19          sbit  cd4017_h0 = P1^1;
  20          sbit  cd4017_h1 = P1^2;
  21          sbit  cd4017_m0 = P1^3;
  22          sbit  cd4017_m1 = P1^4;
  23          sbit  cd4017_s0 = P1^5;
  24          sbit  cd4017_s1 = P1^6;
  25          sbit  cd4017_d0 = P3^2;
  26          sbit  cd4017_dot  = P3^3;
  27          
  28          /********************************/
  29          /*    Global Variable     */
  30          /********************************/
  31          uint8_t code time_max_val[3] = {0x24,0x60,0x60};
  32          uint8_t code date_max_val[2] = {0x32,0x13};
  33          
  34          uint8_t code remote_data[10]  = {0x16,0x0C,0x18,0x5e,0x08,0x1C,0x5A,0x42,0x52,0x4A};
  35          uint8_t code shift_num[10]  = {8,5,1,0,2,6,7,3,9,4};
  36          uint8_t code shift_week[7]  = {5,3,7,6,2,0,1};
  37          
  38          uint8_t data clock_data[7]  = {0x30,0x36,0x01,0x20,0x06,0x01,0x14};
  39          
  40          static uint8_t data timer_count;
  41          static uint8_t data nixie_roll = 200;
  42          uint8_t IRCOM[4] = {0};
  43          bit update_flag = 0;
  44          bit roll_nixie_flag = 0;
  45          
  46          /********************************/
  47          /*      All Functions   */
  48          /********************************/
  49          void ds1302_ini(void);
  50          void ds1302_setup(uint8_t *clock_ptr);
  51          uint8_t ds1302_read(uint8_t cmd);
  52          void ds1302_write(uint8_t cmd, uint8_t data_in);
  53          void ds1302_wr(uint8_t cmd);
  54          void update_nixie_clock(void);
  55          void IR_transmit(void);
C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 2   

  56          void nixie_setup(void);
  57          void roll_nixie_fun(void);
  58          
  59          void delay(uint8_t x){
  60   1        
  61   1        uint8_t i;
  62   1        while(x--){for(i = 0; i<13; i++);}
  63   1      }
  64          
  65          void timer0_isr() interrupt 1{
  66   1        
  67   1        TR0 = 0; TF0 = 0;
  68   1      
  69   1        timer_count++;
  70   1        
  71   1        if(timer_count > 19){
  72   2          timer_count = 0;
  73   2          nixie_roll++;
  74   2          
  75   2          if(nixie_roll > 239){
  76   3            nixie_roll = 0;
  77   3            roll_nixie_flag = 1;
  78   3          }
  79   2          
  80   2          else if(nixie_roll < 240){
  81   3            update_flag = 1;
  82   3          }
  83   2        }
  84   1        
  85   1        if(timer_count == 10){cd4017_dot = 1;}
  86   1        else if(!timer_count){cd4017_dot = 0;}
  87   1        
  88   1        TL0 = 0xB0;
  89   1        TH0 = 0x3C;
  90   1        TR0 = 1;
  91   1      }
  92          
  93          void main(void){
  94   1        
  95   1        hx1838_data = 1;
  96   1        ds1302_cs = 0;ds1302_sck = 0;
  97   1        cd4017_rst = 0;cd4017_rst = 1;cd4017_rst = 0;
  98   1        
  99   1        ds1302_ini();
 100   1        if(ds1302_read(0xC1) != 0xAA){
 101   2          ds1302_setup(clock_data);
 102   2        }
 103   1        
 104   1        TMOD = 0x01;
 105   1        ET0 = 1;
 106   1        TL0 = 0xB0;
 107   1        TH0 = 0x3C;
 108   1        TR0 = 1;
 109   1        EA = 1;
 110   1      
 111   1        while(1){
 112   2          
 113   2          if(update_flag){
 114   3            update_nixie_clock();
 115   3            update_flag = 0;
 116   3          }
 117   2          
C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 3   

 118   2          if(roll_nixie_flag){
 119   3            roll_nixie_fun();
 120   3            update_nixie_clock();
 121   3            roll_nixie_flag = 0;
 122   3          }
 123   2          
 124   2          hx1838_data = 1;
 125   2          
 126   2          if(!hx1838_data){
 127   3            EA = 0;
 128   3            IR_transmit();
 129   3            
 130   3            if(IRCOM[2] == 0x46){
 131   4              IRCOM[2] = 0x00;
 132   4              nixie_setup();
 133   4            }
 134   3            
 135   3            EA = 1;
 136   3          }
 137   2        }
 138   1      }
 139          
 140          void nixie_setup(){
 141   1        
 142   1        uint8_t time_temp[6] = {0};
 143   1        uint8_t date_temp[6] = {0};
 144   1        uint8_t week_date = 0x00;
 145   1        
 146   1        uint8_t i, update_pos = 0;
 147   1        
 148   1        uint8_t *ptr_temp;
 149   1        uint8_t *ptr = time_temp;
 150   1        
 151   1        cd4017_dot = 0;
 152   1        
 153   1        cd4017_rst = 0; cd4017_rst = 1;cd4017_rst = 0;          //  set all digit to zero
 154   1        for(i = 0; i < 8; i++){P1 = 0x00;P1 = 0x7E;P1 = 0x00;}
 155   1        
 156   1        while(1){
 157   2          
 158   2      redo_label:
 159   2          
 160   2          if(!hx1838_data){IR_transmit();}
 161   2          
 162   2          if(IRCOM[2] == 0x09){ //  EQ = Enter
 163   3            
 164   3            IRCOM[2] = 0x00;
 165   3            
 166   3            if(update_pos == 0){
 167   4              for(i = 0; i < 3; i++){
 168   5                if((time_temp[2*i]<<4|time_temp[2*i+1]) >= time_max_val[i]){
 169   6                  ptr = time_temp;
 170   6                  goto redo_label;
 171   6                }
 172   5              }
 173   4              /*update_pos=1;
 174   4              ptr = &date_temp[0];
 175   4              cd4017_dot = 1;
 176   4              goto renew_val;
 177   4            }
 178   4            
 179   4            if(update_pos == 1){
C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 4   

 180   4              for(i = 0; i < 2; i++){
 181   4                if( (date_temp[2*i]<<4|date_temp[2*i+1]) >= date_max_val[i] || 
 182   4                  (date_temp[2*i]<<4|date_temp[2*i+1]) < 0x01){
 183   4                  ptr = date_temp;
 184   4                  goto redo_label;
 185   4                }
 186   4              }
 187   4              update_pos++;
 188   4            }
 189   4            
 190   4            if(update_pos >= 2){*/
 191   4              ds1302_write(0x8E,0x00);
 192   4              ds1302_write(0x90,0x50);
 193   4              ds1302_write(0x80,(time_temp[4]<<4|time_temp[5]));
 194   4              ds1302_write(0x82,(time_temp[2]<<4|time_temp[3]));
 195   4              ds1302_write(0x84,(time_temp[0]<<4|time_temp[1]));
 196   4              //ds1302_write(0x86,(date_temp[0]<<4|date_temp[1]));
 197   4              //ds1302_write(0x88,(date_temp[2]<<4|date_temp[3]));
 198   4              ds1302_write(0x8A,week_date);
 199   4              //ds1302_write(0x8C,(date_temp[4]<<4|date_temp[5]));
 200   4              break;
 201   4            }
 202   3          }
 203   2          
 204   2          else if(IRCOM[2] == 0x15){
 205   3            week_date++;
 206   3            if(week_date > 0x07){week_date = 0x01;}
 207   3            goto renew_val;
 208   3          }
 209   2          
 210   2          else if(IRCOM[2] == 0x07){
 211   3            if(week_date == 0x01){week_date = 0x08;}
 212   3            week_date--;
 213   3            goto renew_val;
 214   3          }
 215   2          
 216   2          for(i = 0; i < 10; i++){
 217   3            if(IRCOM[2] == remote_data[i]){
 218   4              *ptr = i;
 219   4              ptr++;
 220   4              goto renew_val;
 221   4            }
 222   3          }
 223   2          
 224   2          goto redo_label;
 225   2              
 226   2      renew_val:
 227   2          
 228   2          ptr_temp = date_temp;
 229   2          if(update_pos == 0){ptr_temp = time_temp;}
 230   2          
 231   2          cd4017_rst = 0; cd4017_rst = 1;cd4017_rst = 0;
 232   2          
 233   2          for(i = 0; i < 10; i++){
 234   3            if(shift_num[*ptr_temp] > i){cd4017_h0 = 0;cd4017_h0 = 1;cd4017_h0 = 0;}
 235   3              ptr_temp++;
 236   3            if(shift_num[*ptr_temp] > i){cd4017_h1 = 0;cd4017_h1 = 1;cd4017_h1 = 0;}
 237   3              ptr_temp++;
 238   3            if(shift_num[*ptr_temp] > i){cd4017_m0 = 0;cd4017_m0 = 1;cd4017_m0 = 0;}
 239   3              ptr_temp++;
 240   3            if(shift_num[*ptr_temp] > i){cd4017_m1 = 0;cd4017_m1 = 1;cd4017_m1 = 0;}
 241   3              ptr_temp++;
C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 5   

 242   3            if(shift_num[*ptr_temp] > i){cd4017_s0 = 0;cd4017_s0 = 1;cd4017_s0 = 0;}
 243   3              ptr_temp++;
 244   3            if(shift_num[*ptr_temp] > i){cd4017_s1 = 0;cd4017_s1 = 1;cd4017_s1 = 0;}
 245   3            
 246   3            if(shift_week[(week_date-1)] > i){cd4017_d0 = 0;cd4017_d0 = 1;cd4017_d0 = 0;}
 247   3            
 248   3            ptr_temp = date_temp;
 249   3            if(update_pos == 0){ptr_temp = time_temp;}
 250   3          }
 251   2          
 252   2          IRCOM[2] = 0x00;
 253   2        }
 254   1      }
 255          
 256          void IR_transmit(){
 257   1        
 258   1        uint8_t j, k, N = 0;
 259   1        IRCOM[2] = 0x00;
 260   1        
 261   1        delay(15);
 262   1        
 263   1        if(hx1838_data){return;}
 264   1        while (!hx1838_data){delay(1);}
 265   1      
 266   1        for (j=0;j<4;j++){
 267   2          for (k=0;k<8;k++){
 268   3            while(hx1838_data){delay(1);}
 269   3            while(!hx1838_data){delay(1);}
 270   3            while(hx1838_data){delay(1); N++; if(N>=30){IRCOM[2] = 0x00;return;}}
 271   3      
 272   3            IRCOM[j]=IRCOM[j] >> 1;
 273   3            if (N>=8){IRCOM[j] = IRCOM[j] | 0x80;}
 274   3            N=0;
 275   3          }
 276   2        }
 277   1      
 278   1        j = ~IRCOM[3];
 279   1      
 280   1        if(IRCOM[2]!= j){IRCOM[2] = 0x00;return;}
 281   1      }
 282          
 283          void roll_nixie_fun(){
 284   1        
 285   1        uint8_t i;
 286   1        
 287   1        cd4017_rst = 0;cd4017_rst = 1;cd4017_rst = 0;
 288   1        
 289   1        for(i = 0; i < 100; i++){
 290   2          delay(250);delay(250);delay(250);
 291   2          P1 = 0x00;
 292   2          P1 = 0x7E;
 293   2          P1 = 0x00;
 294   2        }
 295   1      }
 296          
 297          void update_nixie_clock(){
 298   1        
 299   1        uint8_t i;
 300   1        
 301   1        for(i = 0; i < 7; i++)
 302   1          clock_data[i] = ds1302_read(0x81+(i*2));
 303   1          
C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 6   

 304   1        cd4017_rst = 0; cd4017_rst = 1;cd4017_rst = 0;
 305   1          
 306   1        for(i = 0; i < 10; i++){
 307   2          if(shift_num[(clock_data[2]/16)] > i){cd4017_h0 = 0;cd4017_h0 = 1;cd4017_h0 = 0;}
 308   2          if(shift_num[(clock_data[2]%16)] > i){cd4017_h1 = 0;cd4017_h1 = 1;cd4017_h1 = 0;}
 309   2          if(shift_num[(clock_data[1]/16)] > i){cd4017_m0 = 0;cd4017_m0 = 1;cd4017_m0 = 0;}
 310   2          if(shift_num[(clock_data[1]%16)] > i){cd4017_m1 = 0;cd4017_m1 = 1;cd4017_m1 = 0;}
 311   2          if(shift_num[(clock_data[0]/16)] > i){cd4017_s0 = 0;cd4017_s0 = 1;cd4017_s0 = 0;}
 312   2          if(shift_num[(clock_data[0]%16)] > i){cd4017_s1 = 0;cd4017_s1 = 1;cd4017_s1 = 0;}
 313   2          if(shift_week[(clock_data[5]-1)] > i){cd4017_d0 = 0;cd4017_d0 = 1;cd4017_d0 = 0;}
 314   2        }
 315   1      }
 316          
 317          void ds1302_ini(){
 318   1        
 319   1        ds1302_write(0x8E,0x00);
 320   1        ds1302_write(0x90,0x50);
 321   1      }
 322          
 323          void ds1302_setup(uint8_t *clock_ptr){
 324   1        
 325   1        uint8_t i;
 326   1        
 327   1        ds1302_write(0x8E,0x00);
 328   1        ds1302_write(0x90,0x50);
 329   1        for(i = 0; i < 8; i++){
 330   2          ds1302_write(0x80+(i*2),clock_ptr[i]);
 331   2        }
 332   1        ds1302_write(0xC0,0xAA);
 333   1      }
 334          
 335          void ds1302_write(uint8_t cmd, uint8_t data_in){
 336   1        
 337   1        ds1302_cs = 1;
 338   1        ds1302_wr(cmd);
 339   1        ds1302_wr(data_in);
 340   1        ds1302_cs = 0;
 341   1      }
 342          
 343          void ds1302_wr(uint8_t cmd){
 344   1        
 345   1        uint8_t i,buff;
 346   1        buff = cmd;
 347   1        
 348   1        for(i = 0; i < 8; i++){
 349   2          ds1302_sdin = 0;
 350   2          if(buff&0x01){ds1302_sdin = 1;};
 351   2          ds1302_sck = 1;_nop_();
 352   2          ds1302_sck = 0;_nop_();
 353   2          buff>>=1;
 354   2        }
 355   1      }
 356          
 357          uint8_t ds1302_read(uint8_t cmd){
 358   1        
 359   1        uint8_t i, buff;
 360   1      
 361   1        ds1302_cs = 1;
 362   1        ds1302_wr(cmd);
 363   1        
 364   1        for(i = 0; i < 8; i++){
 365   2          buff>>=1;
C51 COMPILER V9.52.0.0   MAIN                                                              11/23/2014 02:37:49 PAGE 7   

 366   2          if(ds1302_sdin){buff |= 0x80;};
 367   2          ds1302_sck = 1;_nop_();
 368   2          ds1302_sck = 0;_nop_();
 369   2        }
 370   1        
 371   1        ds1302_cs = 0;
 372   1        return(buff);
 373   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1185    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      26
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
