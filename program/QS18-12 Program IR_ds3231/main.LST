C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE main.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <STC89C5xRC.H>
   2          #include <intrins.h>
   3          
   4          typedef unsigned char uint8_t;
   5          typedef unsigned int uint16_t;
   6          
   7          #define ds3231_ad 0xd0
   8          
   9          /********************************/
  10          /*    Real Time Clock Pin   */
  11          /********************************/
  12          sbit  ds3231_rst  = P2^2;
  13          sbit  ds3231_sda  = P2^1;
  14          sbit  ds3231_scl  = P2^0;
  15          sbit  hx1838_data = P0^0;
  16          /********************************/
  17          /*    All Shift Data  Pin   */
  18          /********************************/
  19          sbit  cd4017_rst  = P1^7;
  20          sbit  cd4017_h0 = P1^1;
  21          sbit  cd4017_h1 = P1^2;
  22          sbit  cd4017_m0 = P1^3;
  23          sbit  cd4017_m1 = P1^4;
  24          sbit  cd4017_s0 = P1^5;
  25          sbit  cd4017_s1 = P1^6;
  26          sbit  cd4017_d0 = P3^2;
  27          sbit  cd4017_dot  = P3^3;
  28          
  29          /********************************/
  30          /*    Global Variable     */
  31          /********************************/
  32          uint8_t code time_max_val[3] = {0x24,0x60,0x60};
  33          uint8_t code date_max_val[2] = {0x32,0x13};
  34          
  35          uint8_t code remote_data[10]  = {0x16,0x0C,0x18,0x5e,0x08,0x1C,0x5A,0x42,0x52,0x4A};
  36          uint8_t code shift_num[10]  = {8,5,1,0,2,6,7,3,9,4};
  37          uint8_t code shift_week[7]  = {5,3,7,6,2,0,1};
  38          
  39          uint8_t data clock_data[7]  = {0x30,0x04,0x08,0x01,0x30,0x11,0x14};
  40          
  41          static uint8_t data timer_count;
  42          static uint8_t data nixie_roll = 200;
  43          uint8_t IRCOM[4] = {0};
  44          bit update_flag = 0;
  45          bit roll_nixie_flag = 0;
  46          
  47          /********************************/
  48          /*      All Functions   */
  49          /********************************/
  50          
  51          void ds3231_ini(void);
  52          void ds3231_wr(uint8_t, uint8_t);
  53          uint8_t ds3231_rd(uint8_t);
  54          void delay_ns(void);
  55          
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 2   

  56          void update_nixie_clock(void);
  57          void IR_transmit(void);
  58          void nixie_setup(void);
  59          void roll_nixie_fun(void);
  60          
  61          void delay(uint8_t x){
  62   1        
  63   1        uint8_t i;
  64   1        while(x--){for(i = 0; i<13; i++);}
  65   1      }
  66          
  67          void timer0_isr() interrupt 1{
  68   1        
  69   1        TR0 = 0; TF0 = 0;
  70   1      
  71   1        timer_count++;
  72   1        
  73   1        if(timer_count > 19){
  74   2          timer_count = 0;
  75   2          nixie_roll++;
  76   2          
  77   2          if(nixie_roll > 239){
  78   3            nixie_roll = 0;
  79   3            roll_nixie_flag = 1;
  80   3          }
  81   2          
  82   2          else if(nixie_roll < 240){
  83   3            update_flag = 1;
  84   3          }
  85   2        }
  86   1        
  87   1        if(timer_count == 10){cd4017_dot = 1;}
  88   1        else if(!timer_count){cd4017_dot = 0;}
  89   1        
  90   1        TL0 = 0xB0;
  91   1        TH0 = 0x3C;
  92   1        TR0 = 1;
  93   1      }
  94          
  95          void main(void){
  96   1        
  97   1        hx1838_data = 1;
  98   1        cd4017_rst = 0;cd4017_rst = 1;cd4017_rst = 0;
  99   1        
 100   1        ds3231_ini();
 101   1        ds3231_wr(0x0e,0x1c);
 102   1        
 103   1        TMOD = 0x01;
 104   1        ET0 = 1;
 105   1        TL0 = 0xB0;
 106   1        TH0 = 0x3C;
 107   1        TR0 = 1;
 108   1        EA = 1;
 109   1      
 110   1        while(1){
 111   2          
 112   2          if(update_flag){
 113   3            update_nixie_clock();
 114   3            update_flag = 0;
 115   3          }
 116   2          
 117   2          if(roll_nixie_flag){
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 3   

 118   3            roll_nixie_fun();
 119   3            update_nixie_clock();
 120   3            roll_nixie_flag = 0;
 121   3          }
 122   2          
 123   2          hx1838_data = 1;
 124   2          
 125   2          if(!hx1838_data){
 126   3            
 127   3            EA = 0;
 128   3            IR_transmit();
 129   3            
 130   3            if(IRCOM[2] == 0x46){
 131   4              IRCOM[2] = 0x00;
 132   4              nixie_setup();
 133   4            }
 134   3            
 135   3            EA = 1;
 136   3          }
 137   2        }
 138   1      }
 139          
 140          void nixie_setup(){
 141   1        
 142   1        uint8_t time_temp[6] = {0};
 143   1        uint8_t date_temp[6] = {0};
 144   1        uint8_t week_date = 0x00;
 145   1        
 146   1        uint8_t i, update_pos = 0;
 147   1        
 148   1        uint8_t *ptr_temp;
 149   1        uint8_t *ptr = time_temp;
 150   1        
 151   1        cd4017_dot = 0;
 152   1        
 153   1        cd4017_rst = 0; cd4017_rst = 1;cd4017_rst = 0;          //  set all digit to zero
 154   1        for(i = 0; i < 8; i++){P1 = 0x00;P1 = 0x7E;P1 = 0x00;}
 155   1        
 156   1        while(1){
 157   2          
 158   2      redo_label:
 159   2          
 160   2          if(!hx1838_data){IR_transmit();}
 161   2          
 162   2          if(IRCOM[2] == 0x09){ //  EQ = Enter
 163   3            
 164   3            IRCOM[2] = 0x00;
 165   3            
 166   3            if(update_pos == 0){
 167   4              for(i = 0; i < 3; i++){
 168   5                if((time_temp[2*i]<<4|time_temp[2*i+1]) >= time_max_val[i]){
 169   6                  ptr = time_temp;
 170   6                  goto redo_label;
 171   6                }
 172   5              }
 173   4              
 174   4              ds3231_wr(0x0e,0x1c);
 175   4              ds3231_wr(0x00,(time_temp[4]<<4|time_temp[5]));
 176   4              ds3231_wr(0x01,(time_temp[2]<<4|time_temp[3]));
 177   4              ds3231_wr(0x02,(time_temp[0]<<4|time_temp[1]));
 178   4              ds3231_wr(0x03,week_date);
 179   4              break;
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 4   

 180   4            }
 181   3          }
 182   2          
 183   2          else if(IRCOM[2] == 0x15){
 184   3            week_date++;
 185   3            if(week_date > 0x07){week_date = 0x01;}
 186   3            goto renew_val;
 187   3          }
 188   2          
 189   2          else if(IRCOM[2] == 0x07){
 190   3            if(week_date == 0x01){week_date = 0x08;}
 191   3            week_date--;
 192   3            goto renew_val;
 193   3          }
 194   2          
 195   2          for(i = 0; i < 10; i++){
 196   3            if(IRCOM[2] == remote_data[i]){
 197   4              *ptr = i;
 198   4              ptr++;
 199   4              goto renew_val;
 200   4            }
 201   3          }
 202   2          
 203   2          goto redo_label;
 204   2              
 205   2      renew_val:
 206   2          
 207   2          ptr_temp = date_temp;
 208   2          if(update_pos == 0){ptr_temp = time_temp;}
 209   2          
 210   2          cd4017_rst = 0; cd4017_rst = 1;cd4017_rst = 0;
 211   2          
 212   2          for(i = 0; i < 10; i++){
 213   3            if(shift_num[*ptr_temp] > i){cd4017_h0 = 0;cd4017_h0 = 1;cd4017_h0 = 0;}
 214   3              ptr_temp++;
 215   3            if(shift_num[*ptr_temp] > i){cd4017_h1 = 0;cd4017_h1 = 1;cd4017_h1 = 0;}
 216   3              ptr_temp++;
 217   3            if(shift_num[*ptr_temp] > i){cd4017_m0 = 0;cd4017_m0 = 1;cd4017_m0 = 0;}
 218   3              ptr_temp++;
 219   3            if(shift_num[*ptr_temp] > i){cd4017_m1 = 0;cd4017_m1 = 1;cd4017_m1 = 0;}
 220   3              ptr_temp++;
 221   3            if(shift_num[*ptr_temp] > i){cd4017_s0 = 0;cd4017_s0 = 1;cd4017_s0 = 0;}
 222   3              ptr_temp++;
 223   3            if(shift_num[*ptr_temp] > i){cd4017_s1 = 0;cd4017_s1 = 1;cd4017_s1 = 0;}
 224   3            
 225   3            if(shift_week[(week_date-1)] > i){cd4017_d0 = 0;cd4017_d0 = 1;cd4017_d0 = 0;}
 226   3            
 227   3            ptr_temp = date_temp;
 228   3            if(update_pos == 0){ptr_temp = time_temp;}
 229   3          }
 230   2          
 231   2          IRCOM[2] = 0x00;
 232   2        }
 233   1      }
 234          
 235          void IR_transmit(){
 236   1        
 237   1        uint8_t j, k, N = 0;
 238   1        IRCOM[2] = 0x00;
 239   1        
 240   1        delay(15);
 241   1        
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 5   

 242   1        if(hx1838_data){return;}
 243   1        while (!hx1838_data){delay(1);}
 244   1      
 245   1        for (j=0;j<4;j++){
 246   2          for (k=0;k<8;k++){
 247   3            while(hx1838_data){delay(1);}
 248   3            while(!hx1838_data){delay(1);}
 249   3            while(hx1838_data){delay(1); N++; if(N>=30){IRCOM[2] = 0x00;return;}}
 250   3      
 251   3            IRCOM[j]=IRCOM[j] >> 1;
 252   3            if (N>=8){IRCOM[j] = IRCOM[j] | 0x80;}
 253   3            N=0;
 254   3          }
 255   2        }
 256   1      
 257   1        j = ~IRCOM[3];
 258   1      
 259   1        if(IRCOM[2]!= j){IRCOM[2] = 0x00;return;}
 260   1      }
 261          
 262          void roll_nixie_fun(){
 263   1        
 264   1        uint8_t i;
 265   1        
 266   1        cd4017_rst = 0;cd4017_rst = 1;cd4017_rst = 0;
 267   1        
 268   1        for(i = 0; i < 100; i++){
 269   2          delay(250);delay(250);delay(250);
 270   2          P1 = 0x00;
 271   2          P1 = 0x7E;
 272   2          P1 = 0x00;
 273   2        }
 274   1      }
 275          
 276          void update_nixie_clock(){
 277   1        
 278   1        uint8_t i;
 279   1        
 280   1        for(i = 0; i < 7; i++)
 281   1          clock_data[i] = ds3231_rd(i);
 282   1          
 283   1        cd4017_rst = 0; cd4017_rst = 1;cd4017_rst = 0;
 284   1          
 285   1        for(i = 0; i < 10; i++){
 286   2          if(shift_num[(clock_data[2]/16)] > i){cd4017_h0 = 0;cd4017_h0 = 1;cd4017_h0 = 0;}
 287   2          if(shift_num[(clock_data[2]%16)] > i){cd4017_h1 = 0;cd4017_h1 = 1;cd4017_h1 = 0;}
 288   2          if(shift_num[(clock_data[1]/16)] > i){cd4017_m0 = 0;cd4017_m0 = 1;cd4017_m0 = 0;}
 289   2          if(shift_num[(clock_data[1]%16)] > i){cd4017_m1 = 0;cd4017_m1 = 1;cd4017_m1 = 0;}
 290   2          if(shift_num[(clock_data[0]/16)] > i){cd4017_s0 = 0;cd4017_s0 = 1;cd4017_s0 = 0;}
 291   2          if(shift_num[(clock_data[0]%16)] > i){cd4017_s1 = 0;cd4017_s1 = 1;cd4017_s1 = 0;}
 292   2          if(shift_week[(clock_data[3]-1)] > i){cd4017_d0 = 0;cd4017_d0 = 1;cd4017_d0 = 0;}
 293   2        }
 294   1      }
 295          
 296          
 297          
 298          
 299          
 300          void ds3231_ini(){
 301   1        
 302   1        ds3231_scl = 1;
 303   1        ds3231_sda = 1;
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 6   

 304   1        ds3231_rst = 0;
 305   1        delay_ns();
 306   1        ds3231_rst = 1;
 307   1        delay_ns();
 308   1      }
 309          
 310          void ds3231_wr(uint8_t ds_add, uint8_t ds_dat){
 311   1        
 312   1        uint8_t i;
 313   1        
 314   1        ds3231_scl = 1;
 315   1        ds3231_sda = 1;
 316   1        delay_ns();
 317   1        ds3231_sda = 0;
 318   1        delay_ns();
 319   1        ds3231_scl = 0;
 320   1        
 321   1        for(i = 0; i < 8; i++){
 322   2          if(ds3231_ad&0x80>>i){ds3231_sda = 1;}
 323   2          else{ds3231_sda = 0;}
 324   2          delay_ns();
 325   2          ds3231_scl = 1;delay_ns();
 326   2          ds3231_scl = 0;delay_ns();
 327   2        }
 328   1        
 329   1        ds3231_sda = 0;delay_ns();
 330   1        ds3231_scl = 1;delay_ns();
 331   1        ds3231_scl = 0;delay_ns();
 332   1        
 333   1        for(i = 0; i < 8; i++){
 334   2          if(ds_add&0x80>>i){ds3231_sda = 1;}
 335   2          else{ds3231_sda = 0;}
 336   2          delay_ns();
 337   2          ds3231_scl = 1;delay_ns();
 338   2          ds3231_scl = 0;delay_ns();
 339   2        }
 340   1        
 341   1        ds3231_sda = 0;delay_ns();
 342   1        ds3231_scl = 1;delay_ns();
 343   1        ds3231_scl = 0;delay_ns();
 344   1        
 345   1        for(i = 0; i < 8; i++){
 346   2          if(ds_dat&0x80>>i){ds3231_sda = 1;}
 347   2          else{ds3231_sda = 0;}
 348   2          delay_ns();
 349   2          ds3231_scl = 1;delay_ns();
 350   2          ds3231_scl = 0;delay_ns();
 351   2        }
 352   1        
 353   1        ds3231_sda = 0;delay_ns();
 354   1        ds3231_scl = 1;delay_ns();
 355   1        ds3231_scl = 0;delay_ns();
 356   1        ds3231_scl = 1;delay_ns();
 357   1        ds3231_sda = 1;
 358   1      }
 359          
 360          uint8_t ds3231_rd(uint8_t ds_add){
 361   1        
 362   1        uint8_t i;
 363   1        uint8_t ds_dat = 0;
 364   1        
 365   1        ds3231_scl = 1;
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 7   

 366   1        ds3231_sda = 1;
 367   1        delay_ns();
 368   1        ds3231_sda = 0;
 369   1        delay_ns();
 370   1        ds3231_scl = 0;
 371   1        
 372   1        for(i = 0; i < 8; i++){
 373   2          if((ds3231_ad)&0x80>>i){ds3231_sda = 1;}
 374   2          else{ds3231_sda = 0;}
 375   2          delay_ns();
 376   2          ds3231_scl = 1;delay_ns();
 377   2          ds3231_scl = 0;delay_ns();
 378   2        }
 379   1        
 380   1        ds3231_sda = 0;delay_ns();
 381   1        ds3231_scl = 1;delay_ns();
 382   1        ds3231_scl = 0;delay_ns();
 383   1        
 384   1        for(i = 0; i < 8; i++){
 385   2          if(ds_add&0x80>>i){ds3231_sda = 1;}
 386   2          else{ds3231_sda = 0;}
 387   2          delay_ns();
 388   2          ds3231_scl = 1;delay_ns();
 389   2          ds3231_scl = 0;delay_ns();
 390   2        }
 391   1        
 392   1        ds3231_sda = 0;delay_ns();
 393   1        ds3231_scl = 1;delay_ns();
 394   1        ds3231_scl = 0;delay_ns();
 395   1        
 396   1        ds3231_sda = 1;delay_ns();
 397   1        ds3231_scl = 1;delay_ns();
 398   1        ds3231_sda = 0;delay_ns();
 399   1        ds3231_scl = 0;delay_ns();
 400   1        
 401   1        for(i = 0; i < 8; i++){
 402   2          if((ds3231_ad+1)&0x80>>i){ds3231_sda = 1;}
 403   2          else{ds3231_sda = 0;}
 404   2          delay_ns();
 405   2          ds3231_scl = 1;delay_ns();
 406   2          ds3231_scl = 0;delay_ns();
 407   2        }
 408   1        
 409   1        ds3231_sda = 0;delay_ns();
 410   1        ds3231_scl = 1;delay_ns();
 411   1        ds3231_scl = 0;delay_ns();
 412   1        
 413   1        ds3231_sda = 1;
 414   1        
 415   1        for(i = 0; i < 8; i++){
 416   2          ds_dat <<= 1;
 417   2          ds3231_scl = 1;delay_ns();
 418   2          if(ds3231_sda){ds_dat++;}
 419   2          ds3231_scl = 0;delay_ns();
 420   2        }
 421   1        
 422   1        ds3231_sda = 1;delay_ns();
 423   1        ds3231_scl = 1;delay_ns();
 424   1        ds3231_scl = 0;delay_ns();
 425   1        
 426   1        ds3231_sda = 0;delay_ns();
 427   1        ds3231_scl = 1;delay_ns();
C51 COMPILER V9.52.0.0   MAIN                                                              11/30/2014 08:04:55 PAGE 8   

 428   1        ds3231_sda = 1;
 429   1        
 430   1        return ds_dat;
 431   1      }
 432          
 433          void delay_ns(){
 434   1        
 435   1        uint8_t i = 0;
 436   1        
 437   1        while(++i);
 438   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1573    ----
   CONSTANT SIZE    =     44    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
